#!/usr/bin/perl -w

use utf8;
use strict;
use JSON;
use EOSN::Log qw(write_timestamp_log);
use EOSN::File qw(write_file_atomic);
use EOSN::Validate::Webpage;
use EOSN::SQL qw(do_connect_mysql);
use File::Slurp qw(read_dir read_file);
use Time::HiRes qw(usleep);
use File::Touch qw(touch);
use Date::Format qw(time2str);

binmode(STDOUT, ":utf8");

# --------------------------------------------------------------------------
# Config

# --------------------------------------------------------------------------
# Main

my $webpage = EOSN::Validate::Webpage->new;
my $configdir = $webpage->configdir;
my $webdir = $webpage->webdir;

write_timestamp_log ('starting');

my @pids;
my $delay = 10;

foreach my $chain ($webpage->chains) {
	fork_chain ($chain);
	sleep ($delay);
}

wait ();

write_timestamp_log ('stopping');

foreach my $pid (@pids) {
	write_timestamp_log ("kill pid=<$pid>");
	kill ('TERM', $pid);
}

# --------------------------------------------------------------------------
# Subroutines

sub fork_chain {
	my ($chain) = @_;

	my $properties = $webpage->chain_properties ($chain);
	return if (! $$properties{active});

	my $pid1 = fork;
	if (! defined $pid1) {
		die "$0: could not fork";
		next;
	} elsif (! $pid1) {
		write_timestamp_log ("run update chain=<$chain>");
		update_chain ($chain);
		write_timestamp_log ("abnormal exit update chain=<$chain>");
		die "$0: update chain=<$chain> exited abmormally";
	} else {
		push (@pids, $pid1);
	}
}

sub update_chain {
	my ($chain) = @_;
	
	my $wait_time = 150;

	setup_chain ($chain);

	while (1) {
		exit if (getppid() == 1);
		my $start_time = time;

		write_results ($chain);
		run_reports ($chain);
		clean_dir ($chain, 'producer', "$webdir/$chain/producers");

		my $end_time = time;
		my $process_time = $end_time - $start_time;
		my $sleep_time = $wait_time - $process_time;
		$sleep_time = 0 if ($sleep_time < 0);

		write_timestamp_log ("[$chain] in time=<$process_time s> sleep=<$sleep_time s>");
		sleep ($sleep_time);
	}
}

sub setup_chain {
	my ($chain) = @_;

	foreach my $dir ("$webdir/$chain", "$webdir/$chain/info", "$webdir/$chain/reports", "$webdir/$chain/producers") {
		if (! -d $dir) {
			write_timestamp_log ("create dir=<$dir>");
			mkdir ($dir);
		}
	}

	my $bpsjson = "$webdir/$chain/bps.json";
	if (! -e $bpsjson) {
		write_timestamp_log ("create initial output=<$bpsjson>");
		write_file_atomic ($bpsjson, "{}");
	}

	do_copy ($chain, "$webdir/res/chain", "$webdir/$chain");
	do_copy ($chain, "$webdir/res/chain/info", "$webdir/$chain/info");
	do_copy ($chain, "$webdir/res/chain/reports", "$webdir/$chain/reports");
}

sub write_results {
	my ($chain) = @_;

	my $dbh = do_connect_mysql ('bpvalidate');
	my $outfile = "$webdir/$chain/bps.json";
	my @results;
	my $data = $dbh->selectall_arrayref("select * from producer_$chain where not results_data is null order by producer", {Slice => {}});
	foreach my $entry (@$data) {
		push (@results, from_json ($$entry{results_data}));
	}

	my $final_result = to_json ({
		meta => {generated_at => time2str("%C", time), maintainer => 'matthew@eosnation.io'},
		producers => \@results
	}, {
		pretty => 0,
		canonical => 1
	});

	write_file_atomic ($outfile, {binmode => ':utf8'}, $final_result . "\n");
}

sub run_reports {
	my ($chain) = @_;

	my $properties = $webpage->chain_properties ($chain);

	foreach my $property (keys %$properties) {
		next if ($property !~ /^report_/);
		next if (! $$properties{$property});
		my $report = $property;
		$report =~ s/_/-/g;
		$report =~ s/^report/webui-report/;

		run_command ("[$chain]", $report, "--chain=$chain", "--input=$webdir/$chain/bps.json");
	}

	run_command ("[$chain]", 'webui-report-producers', "--chain=$chain", "--input=$webdir/$chain/bps.json");
}

sub run_command {
	my ($log_prefix, @command) = @_;

	write_timestamp_log ($log_prefix . ' run command=<' . $command[0] . '>');
	system (@command);
}

sub do_copy {
	my ($chain, $from, $to) = @_;

	my $dh;
	opendir ($dh, $from) || die "$0: cannot open dir=<$from>: $!";
	my @files = grep /\.thtml\./, readdir ($dh);
	closedir ($dh);

	foreach my $file (sort @files) {
		#print ">> [$from/$file] [$to/$file]\n";
		my $data = read_file ("$from/$file");
		write_file_atomic ("$to/$file", "chain = $chain\n$data");
	}
}

sub clean_dir {
	my ($chain, $type, $dir) = @_;

	next if (! -e $dir);
	my @files = read_dir ($dir);

	foreach my $file (@files) {
		my $mtime = (stat "$dir/$file")[9];
		my $age = time - $mtime;
		if ($age > 3600 * 24) {
			write_timestamp_log ("[$chain] remove old file type=<$type> file=<$dir/$file>");
			unlink ("$dir/$file");
		}
	}
}
