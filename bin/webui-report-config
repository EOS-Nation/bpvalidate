#!/usr/bin/perl -w

# --------------------------------------------------------------------------
# Required modules

use utf8;
use strict;
use warnings;
use EOSN::Validate::Report;

binmode(STDOUT, ":utf8");

# --------------------------------------------------------------------------
# Main

my $report = EOSN::Validate::Report->new;
$report->get_report_options;

my $config = $report->config;
my $data = $report->data;
my $chain = $report->chain;
my $properties = $config->chain_properties ($chain);
my %kinds;

foreach my $entry (@{$$data{producers}}) {
	foreach my $kind (sort keys %{$$entry{output}{nodes}}) {
		next if ($kind ne 'p2p');
		$kinds{$kind} = 1;
	}
}

foreach my $lang ($config->langs) {
	foreach my $content_type ($config->content_types) {
		my @report;
		foreach my $kind (sort keys %kinds) {
			my @section;

			foreach my $entry (@{$$data{producers}}) {
				my $producer = $$entry{regproducer}{owner};
				my $important_bp = $report->is_important_bp ($entry);

				foreach my $node (@{$$entry{output}{nodes}{$kind}}) {
					my $location_name = $$node{location}{name} || "Unknown";
					my $location_country = $$node{location}{country} || "??";
					push (@section, {
						sprintf => "# %s: %s, %s",
						data => [$producer, $location_country, $location_name]
					});
					push (@section, {
						sprintf => "%s = %s",
						data => ['p2p-peer-address', $$node{address}]
					});
					push (@section, {
						sprintf => "",
						data => []
					});
				}
			}

			push (@report, {name => $kind, rows => \@section, name_prefix => '# ', section_divider => 2});
		}

		$report->generate_report (lang => $lang, content_type => $content_type, report => \@report, columns => 0, outfile => "reports/config", text => 1, json => 1, html => 1);
	}
}
