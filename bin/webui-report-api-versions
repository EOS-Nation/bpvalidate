#!/usr/bin/perl -w

use utf8;
use strict;
use EOSN::Report;

binmode(STDOUT, ":utf8");

# --------------------------------------------------------------------------
# Main

my $data = get_report_options ();
my $chain = chain ();
my $properties = chain_properties ($chain);
my %kinds;

foreach my $entry (@{$$data{producers}}) {
	foreach my $kind (sort keys %{$$entry{output}{nodes}}) {
		foreach my $node (@{$$entry{output}{nodes}{$kind}}) {
			my ($key, $value) = get_version ($node);
			$kinds{$key} = $value;
		}
	}
}

foreach my $lang (languages ()) {
	foreach my $content_type (content_types ()) {
		my @report;
		foreach my $kind (reverse sort keys %kinds) {
			my @section;

			foreach my $entry (@{$$data{producers}}) {
				my $producer = $$entry{regproducer}{owner};
				my $important_bp = is_important_bp ($entry);

				foreach my $node_type (sort keys %{$$entry{output}{nodes}}) {
					next if (($node_type ne 'api_http') && ($node_type ne 'api_https') && ($node_type ne 'api_https2'));

					foreach my $node (@{$$entry{output}{nodes}{$node_type}}) {
						my ($key, $value) = get_version ($node);
						my $orgs = whois_org ($node);
						my $countries = whois_country ($node);
						my $flags = whois_flag ($node);
						my $link = "<a href=\"$$node{address}\">$$node{address}</a>";
						next if ($key ne $kind);
						push (@section, {
							producer => $producer,
							sprintf => "%9s, %20s, %50s, %5s, %s",
							data => [$node_type, ($$node{response}{server_version_string} || 'n/a'), $$node{address}, $countries, $orgs],
							html_data => [undef, undef, $link, $flags, undef]
						});
					}
				}
			}

			push (@report, {name => $kinds{$kind}, rows => \@section}) if (@section);
		}

		generate_report (chain => $chain, lang => $lang, content_type => $content_type, data => $data, report => \@report, columns => 1, outfile => "reports/api_versions", text => 1, json => 1, html => 1);
	}
}

sub get_version {
	my ($node) = @_;

	my $value = $$node{info}{server_version} || 'zzunknown';
	my $key = $value;
	if ($key =~ /^[0-9.]*\s+/) {
		my ($version, $details) = split (/\s+/, $key, 2);
		my (@parts) = split (/\./, $version);
		$key = sprintf ("zzz %03d %03d %03d %s", $parts[0], $parts[1], $parts[2], $details);
	}

	return ($key, $value);
}
