#!/usr/bin/perl -w

# --------------------------------------------------------------------------
# Required modules

use utf8;
use strict;
use warnings;
use EOSN::Validate::Report;

binmode(STDOUT, ":utf8");

# --------------------------------------------------------------------------
# Main

my $report = EOSN::Validate::Report->new;
$report->get_report_options;

my $config = $report->config;
my $data = $report->data;
my $chain = $report->chain;
my $properties = $config->chain_properties ($chain);
my %kinds;

foreach my $entry (@{$$data{producers}}) {
	foreach my $kind (sort keys %{$$entry{output}{nodes}}) {
		foreach my $node (@{$$entry{output}{nodes}{$kind}}) {
			my ($key, $value) = get_speed ($node);
			$kinds{$key} = $value;
		}
	}
}

foreach my $lang ($config->langs) {
	foreach my $content_type ($config->content_types) {
		my @report;
		foreach my $kind (reverse sort keys %kinds) {
			my @section;

			foreach my $entry (@{$$data{producers}}) {
				my $producer = $$entry{regproducer}{owner};
				my $important_bp = $report->is_important_bp ($entry);

				foreach my $node_type (sort keys %{$$entry{output}{nodes}}) {
					next if ($node_type ne 'p2p');

					foreach my $node (@{$$entry{output}{nodes}{$node_type}}) {
						my ($key, $value) = get_speed ($node);
						next if ($key ne $kind);
						push (@section, {
							producer => $producer,
							sprintf => "%6s, %s",
							data => [($$node{info}{speed} || 'n/a'), $$node{address}]
						});
					}
				}
			}

			push (@report, {name => $kinds{$kind}, rows => \@section}) if (@section);
		}

		$report->generate_report (lang => $lang, content_type => $content_type, report => \@report, columns => 1, outfile => "reports/p2p_speed", text => 1, json => 1, html => 1);
	}
}

sub get_speed {
	my ($node) = @_;

	my $mul = 50;
	my $value = $$node{info}{speed};
	my $key;

	if (defined $value) {
		my $xvalue = int($value / $mul) * $mul;
		$key = sprintf ("%03d", $xvalue);
		$value = $xvalue . ' - ' . ($xvalue + $mul) . " speed";
	} else {
		$value = 'zzunknown';
		$key = $value;
	}

	return ($key, $value);
}
