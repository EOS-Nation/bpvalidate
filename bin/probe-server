#!/usr/bin/perl -w

use utf8;
use strict;
use JSON qw(from_json to_json);
use EOSN::Log qw(write_timestamp_log);
use EOSN::UA qw(eosn_cache_ua);
use EOSN::SQL qw(do_connect_sqlite);
use EOSN::Validate::Validator;
use LWP::UserAgent;

binmode(STDOUT, ":utf8");

# --------------------------------------------------------------------------
# Config

my $max_processes = 20;
my $dispatch_server = $ENV{DISPATCH_SERVER} || 'http://localhost:8081';
my $schema_url = $dispatch_server . '/schema';
my $request_url = $dispatch_server . '/request';
my $response_url = $dispatch_server . '/response';

# --------------------------------------------------------------------------
# Main

my $schema = get_schema ();

my @pids;

write_timestamp_log ("starting max_processes=<$max_processes>");

foreach my $thread_id (1 .. $max_processes) {
	my $pid = fork;
	if (! defined $pid) {
		die "$0: could not fork";
	} elsif (! $pid) {
		write_timestamp_log ("[$thread_id] start worker");
		run_main_loop ($thread_id);
		write_timestamp_log ("[$thread_id] end worker");
	} else {
		push (@pids, $pid);
	}
}

run_cleanup ();
wait ();

write_timestamp_log ('stopping');

foreach my $pid (@pids) {
	write_timestamp_log ("kill pid=<$pid>");
	kill ('TERM', $pid);
}

exit 1;

# --------------------------------------------------------------------------
# Subroutines

sub get_schema {
	my $thread_id = 0;
	my $ua = LWP::UserAgent->new;
	$ua->timeout (10);

	my $shema = undef;
	while (! $schema) {
		my $req = HTTP::Request->new ('GET', $schema_url);
		my $res = $ua->request ($req);
		write_timestamp_log ("[$thread_id] " . sprintf ("request url=<%s>, reponse_code=<%s>\n", $schema_url, $res->code));
		if ($res->is_success) {
			$schema = from_json ($res->content);
		} else {
			sleep (10);
		}
	}

	return $schema;
}

sub run_cleanup {
	my $thread_id = 0;
	my $pid = fork;

        if (! defined $pid) {
                die "$0: could not fork";
	} elsif (! $pid) {
		# ok
	} else {
		push (@pids, $pid);
		return;
	}

	write_timestamp_log ("[$thread_id] start cleanup");
	my $dbh = do_connect_sqlite ('bpvalidate');

	while (1) {
		write_timestamp_log ("[$thread_id] run cleanup");
		my $cleanup_time = time - (3600 * 24 * 30);
		$dbh->do ("delete from url where checked_at < $cleanup_time");
		sleep (300);
	}
}

sub run_main_loop {
	my ($thread_id) = @_;

	my $ua = LWP::UserAgent->new;
	$ua->timeout (10);

	while (1) {
		exit if (getppid() == 1);

		handle_request ($thread_id, $ua);
		sleep (1);
	}
}

sub handle_request {
	my ($thread_id, $ua) = @_;

	my $request_req = HTTP::Request->new ('GET', $request_url);
	my $request_res = $ua->request ($request_req);
	write_timestamp_log ("[$thread_id] " . sprintf ("request url=<%s>, reponse_code=<%s>\n", $request_url, $request_res->code));

	if ($request_res->code != 200) {
		sleep ($max_processes * 2);
		return;
	}

	my $request_body = $request_res->content;
	utf8::decode ($request_body);
	my $message;
	eval {
		$message = from_json ($request_body);
	};

	my $receive_time = time;

	my $chain = $$message{chain};
	if (! $chain) {
		write_timestamp_log ("[$thread_id] message missing chain");
		return;
	}

	my $producer = $$message{producer};
	if (! $producer) {
		write_timestamp_log ("[$thread_id] message missing producer");
		return;
	}

	my $dispatch_time = $$message{dispatch_time};
	if (! $dispatch_time) {
		write_timestamp_log ("[$thread_id] message missing dispatch_time");
		return;
	}

	my $expire_time = $$message{expire_time};
	if (! $expire_time) {
		write_timestamp_log ("[$thread_id] message missing expire_time");
		return;
	}

	$$message{receive_time} = $receive_time;
	my $dispatch_delta = $receive_time - $dispatch_time;

	write_timestamp_log ("[$thread_id] received chain=<$chain> producer=<$producer> dispatch_delta=<$dispatch_delta s>");

	my $data = $$message{data};
	delete $$message{data};

	$$data{log_prefix} = "[$thread_id/$chain/$producer]";
	$$data{ua} = eosn_cache_ua ();
	$$data{dbh} = do_connect_sqlite ('bpvalidate');
	$$data{schema} = $schema;

	my $validator = EOSN::Validate::Validator->new (%$data);
	$$message{results} = $validator->validate;
	$$message{processed_time} = time;

	my $response_body = to_json ($message);
	utf8::encode ($response_body);

	my $response_req = HTTP::Request->new ('POST', $response_url, [ 'Content-Type' => 'application/json; charset=utf-8' ], $response_body);
	my $response_res = $ua->request ($response_req);
	write_timestamp_log ("[$thread_id] " . sprintf ("response url=<%s>, reponse_code=<%s>\n", $response_url, $response_res->code));
}
